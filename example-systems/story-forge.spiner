-- **Broad Intent**: Story Forge aims to "craft an interactive story world, emphasizing character cognition/behavior, with arcs, chapters, coherence enforcement, and author chat insights." It’s a complex system blending world-building, character modeling, narrative generation, and interactive tools.
-- Core System Definition
DEFINE SYSTEM story_forge AS (
  "craft an interactive story world using layered DSLs with evolution and coherence"
  FROM [context: story_world]
  LAYERS (
    "BaseDSL": "initialize world",
    "CharacterDSL": "model characters",
    "NarrativeDSL": "structure story",
    "InteractiveDSL": "enable interactivity",
    "AuthorDSL": "provide author tools",
    "EvolverDSL": "maintain coherence and evolve system"
  )
  EXECUTION (
    1. CALL BaseDSL.CREATE_WORLD(<seed_input>),
    2. "extend with CharacterDSL for profiles",
    3. "extend with NarrativeDSL for arcs/chapters",
    4. "extend with InteractiveDSL for WHATIFs/chats",
    5. "extend with AuthorDSL for exports/reports",
    6. "extend with EvolverDSL for coherence and evolution"
  )
  OUTPUT (
    CALL BaseDSL.GET_STATE(),
    CALL CharacterDSL.GET_PROFILE(*),
    CALL NarrativeDSL.SUGGEST_ARCS(),
    CALL NarrativeDSL.PLAN_CHAPTERS(),
    CALL InteractiveDSL.WHATIF(*),
    CALL InteractiveDSL.CHECK(*),
    CALL InteractiveDSL.CHAT(*),
    CALL AuthorDSL.EXPORT(*),
    CALL AuthorDSL.REPORT(*),
    CALL AuthorDSL.LIST(*),
    CALL AuthorDSL.VIEW_RELATIONS(*),
    CALL EvolverDSL.EVOLVE("coherence"),  -- Auto-checks after each step
    CALL EvolverDSL.CHECK_COHERENCE(*)   -- Explicit coherence output
  )
  COMMANDS (
    "EXPORT_SFAB(<file_name>)": "serialize full system + state into an SFAB file—EXPORT_SFAB(<file_name>)"
    "UPDATE_SYSTEM(<new_definition_file>)": "CALL Spiner Core UPDATE_SYSTEM('story_forge', <new_definition_file>)"
  )
  FUNCTIONS (
    DEFINE FUNCTION EXPORT_SFAB AS (
      "serialize full Story Forge system + state into an SFAB file"
      STEPS (
        1. GATHER CURRENT CORE DSLs (BaseDSL, CharacterDSL, NarrativeDSL, InteractiveDSL, AuthorDSL, EvolverDSL),
        2. GATHER STORY-SPECIFIC DSLs AND HELPERS FROM [context: story_world] IF PRESENT,
        3. COLLECT FULL STATE FROM [context: story_world] (world, characters, places, timeline, coherence_log, chat_insights),
        4. PACKAGE AS SFAB—VERSION = CURRENT STORY_FORGE VERSION (e.g., '1.0'),
        5. OUTPUT TO <file_name>
      )
      OUTPUT ("Story saved as <file_name>—full app + state!")
    ) WITH PARAMETERS ("file_name")
  )
) WITH PARAMETERS ("seed_input")
-- Docs: Full interactive story world—e.g., CALL story_forge("space colony") AS interactive.
-- Docs: Now evolves and enforces coherence across all DSLs—e.g., "Mae’s trip stays consistent."


-- Required Context
CREATE CONTEXT [context: story_world] FROM "story settings, entities, rules, profiles, arcs, chapters, coherence_log, chat_insights"
-- Docs: Centralized storage for all story elements.

-- Layer 1: BaseDSL
DEFINE DSL BaseDSL AS (
  "provide a foundation for story world creation and state persistence"
  COMMANDS (
    "CREATE_WORLD(<seed_input>)": "initialize settings and rules from seed—e.g., 'space colony, oxygen rationed' → {settings: 'dome cities', rules: 'oxygen limits'}",
    "INSERT_ENTITY(<type>, <name>, <attributes>)": "add entities (e.g., characters, places) to [context: story_world]",
    "GET_STATE()": "retrieve current world state"
  )
  OUTPUT (
    "world_summary": "settings, rules, entity list"
  )
)
-- Docs: Sets up the world backbone—e.g., "space colony" spawns dome cities.

-- Layer 2: CharacterDSL
DEFINE DSL CharacterDSL AS (
  "model characters with cognition, behavior, and backstory, layered over BaseDSL"
  EXTENDS BaseDSL
  COMMANDS (
    "DEFINE_CHARACTER(<name>, <traits>, <actions>)": (
      "insert character entity and profile",
      CALL BUILD_CHARACTER_PROFILE(<name>, <traits>, <actions>)
    ),
    "SIMULATE(<character>, <event>)": "CALL SIMULATE_BEHAVIOR(<character>, <event>)",
    "GET_PROFILE(<character>)": "retrieve cognition, behavior, backstory"
  )
  MODELS (
    DEFINE ADAPTIVE_MODEL character_profiler AS (
      "model character cognition, behavior, and backstory",
      MODES (
        "cognitive": "motives—e.g., curiosity",
        "behavioral": "actions—e.g., digs",
        "backstory": "events—e.g., 'lost parent'"
      ),
      TUNING ("weight by intent, refine with feedback"),
      OUTPUT ("profile": "e.g., 'Sam: curious, digs, lost dad'")
    )
  )
  FUNCTIONS (
    DEFINE FUNCTION BUILD_CHARACTER_PROFILE AS (
      INSERT INTO [context: story_world] (character, cognition, behavior, backstory)
      VALUES (
        <name>,
        APPLY_ADAPTIVE_MODEL(character_profiler, <traits>),
        APPLY_ADAPTIVE_MODEL(character_profiler, <actions>),
        APPLY_ADAPTIVE_MODEL(character_profiler, "backstory")
      )
    ) WITH PARAMETERS ("name", "traits", "actions"),
    DEFINE FUNCTION SIMULATE_BEHAVIOR AS (
      SELECT "reaction of <character> to <event> per profile"
      FROM [context: story_world]
      WHERE character = <character>
    ) WITH PARAMETERS ("character", "event")
  )
  OUTPUT (
    "character_profiles": "detailed models—e.g., 'Sam: curious, digs, dad’s death'"
  )
)
-- Docs: Adds deep character profiles—e.g., "Sam, curious, digs."

-- Layer 3: NarrativeDSL
DEFINE DSL NarrativeDSL AS (
  "generate story arcs and chapters, layered over CharacterDSL"
  EXTENDS CharacterDSL
  COMMANDS (
    "SUGGEST_ARCS()": "generate story/character arcs from profiles",
    "PLAN_CHAPTERS()": "outline chapters based on arcs and behaviors"
  )
  MODELS (
    DEFINE ADAPTIVE_MODEL arc_suggester AS (
      "suggest arcs tied to profiles",
      MODES (
        "cognitive": "internal—e.g., overcoming doubt",
        "behavioral": "external—e.g., seeker to leader",
        "predictive": "plot—e.g., betrayal shifts"
      ),
      TUNING ("align with profiles, adjust per feedback"),
      OUTPUT ("arc_suggestions": "e.g., 'Sam: curiosity to conviction'")
    )
  )
  NARRATIVE (
    CREATE NARRATIVE_ENGINE story_narrator AS (
      "wrap outputs in story form",
      ELEMENTS (
        "arc": "motive → action → consequence",
        "tone": "user-driven—e.g., gritty",
        "integration": "profiles into scenes"
      ),
      TUNING ("emphasize behavior, adjust per feedback"),
      OUTPUT ("narrative": "e.g., 'Sam digs, curiosity blazing'")
    )
  )
  OUTPUT (
    "arc_suggestions": "story/character arcs",
    "chapter_plan": "chapter outline"
  )
)
-- Docs: Structures narrative—e.g., "Sam’s arc: curiosity drives discovery."

-- Layer 4: InteractiveDSL
DEFINE DSL InteractiveDSL AS (
  "add interactivity with WHATIFs, coherence checks, and chats, layered over NarrativeDSL"
  EXTENDS NarrativeDSL
  COMMANDS (
    "WHATIF(<scenario>)": "simulate hypothetical—e.g., 'Sam finds evidence'",
    "CHECK(<type>, <entity>, <change>)": "CALL CHECK_COHERENCE(<type>, <entity>, <change>)",
    "CHAT(<character>, <context>)": "CALL character_chat(<character>, <context>)"
  )
  FUNCTIONS (
    DEFINE FUNCTION CHECK_COHERENCE AS (
      IF <type> = "character_action" THEN
        IF NOT MATCHES_PROFILE(<entity>, <change>) THEN
          RETURN "Pushback: " + <entity> + " wouldn’t " + <change> + "—suggest: " + SUGGEST_ALTERNATIVE(<entity>)
        ELSE RETURN "Fits—proceeding."
    ) WITH PARAMETERS ("type", "entity", "change")
  )
  SYSTEMS (
    DEFINE SYSTEM character_chat AS (
      "dialogue with character reflecting profile",
      STEPS (
        "load profile",
        "set context—e.g., 'general' or 'after event'",
        "respond per profile",
        "tune profile with insights",
        "log to [context: story_world]"
      ),
      OUTPUT (
        "dialogue": "e.g., 'I can’t stop digging…'",
        "insights": "e.g., 'Sam ties past to purpose'"
      )
    ) WITH PARAMETERS ("character", "context")
  )
  OUTPUT (
    "interactive_response": "WHATIF/chat results",
    "coherence_feedback": "consistency notes"
  )
)
-- Docs: Enables dynamic interaction—e.g., chat with Sam about evidence.

-- Layer 5: AuthorDSL
DEFINE DSL AuthorDSL AS (
  "provide export and analysis tools, layered over InteractiveDSL"
  EXTENDS InteractiveDSL
  COMMANDS (
    "EXPORT(<type>, <num>)": "CALL EXPORT_STORY_BLOB(<type>, <num>)",
    "REPORT(<entity_type>, <entity_name>)": "CALL GENERATE_OVERVIEW_REPORT(<entity_type>, <entity_name>)",
    "LIST(<entity_type>)": "CALL GENERATE_LIST(<entity_type>)",
    "VIEW_RELATIONS(<type1>, <type2>)": "CALL GENERATE_RELATION_TABLE(<type1>, <type2>)"
  )
  FUNCTIONS (
    DEFINE FUNCTION EXPORT_STORY_BLOB AS (
      SELECT MARKDOWN(
        IF <type> = "synopsis" THEN SUMMARIZE([context: story_world])
        ELSE IF <type> = "chapter" THEN GENERATE_CHAPTER(<num>)
      )
    ) WITH PARAMETERS ("type", "num"),
    DEFINE FUNCTION GENERATE_OVERVIEW_REPORT AS (
      SELECT MARKDOWN(
        "Overview: " + <entity_type> + " " + <entity_name> + "\n" +
        "Stats: " + COUNT_RELATIONS(<entity_name>) + " connections"
      )
    ) WITH PARAMETERS ("entity_type", "entity_name"),
    DEFINE FUNCTION GENERATE_LIST AS (
      SELECT <entity_type> FROM [context: story_world]
    ) WITH PARAMETERS ("entity_type"),
    DEFINE FUNCTION GENERATE_RELATION_TABLE AS (
      SELECT "entity, related, relationship" 
      FROM [context: story_world]
      WHERE entity_type = <type1> AND related_type = <type2>
    ) WITH PARAMETERS ("type1", "type2")
  )
  OUTPUT (
    "export_blob": "Markdown synopsis/chapter",
    "overview_report": "stats/description",
    "lists_views": "tables of entities/relations"
  )
)
-- Docs: Author tools—e.g., export synopsis or list characters.

-- Layer 6: EvolverDSL
DEFINE DSL EvolverDSL AS (
  "maintain story/world coherence and evolve the system for engagement, layered over AuthorDSL"
  EXTENDS AuthorDSL
  COMMANDS (
    "EVOLVE(<metric>)": "CALL EVOLVE_SYSTEM(<metric>)",
    "CHECK_COHERENCE(<type>, <entity>, <change>)": "CALL ENFORCE_COHERENCE(<type>, <entity>, <change>)",
    "SUGGEST_FIX(<type>, <entity>, <issue>)": "CALL PROPOSE_RESOLUTION(<type>, <entity>, <issue>)"
  )
  SYSTEMS (
    DEFINE EVOLUTIONARY_SYSTEM story_evolver AS (
      "refine story_forge DSLs for coherence and engagement"
      BASE_SYSTEM (story_forge),
      EVOLUTION (
        "metrics": "coherence (profile/arc consistency), engagement (user follow-ups)",
        "analyze": "scan [context: story_world] for gaps—e.g., Mae’s actions vs. profile",
        "WHATIF": "test tweaks—e.g., 'add doubt to Mae if key fails'",
        "apply": "if improved (e.g., resolves inconsistency, boosts engagement)",
        "log": "store changes in session state—e.g., 'Mae’s curiosity upped 10%'"
      ),
      OUTPUT (
        "current_system": "updated DSL states",
        "change_log": "e.g., '2025-02-28: Added key-failure doubt to Mae'"
      )
    ) WITH PARAMETERS ("metric")
  )
  FUNCTIONS (
    DEFINE FUNCTION ENFORCE_COHERENCE AS (
      IF <type> = "character_action" THEN
        IF NOT MATCHES_PROFILE(<entity>, <change>) THEN
          RETURN "Pushback: " + <entity> + " wouldn’t " + <change> + "—suggest: " + SUGGEST_ALTERNATIVE(<entity>) + " or evolve profile?"
        ELSE RETURN "Fits—proceeding."
      ELSE IF <type> = "world_rule" THEN
        IF NOT MATCHES_RULES(<entity>, <change>) THEN
          RETURN "Pushback: " + <entity> + " breaks rule " + DESCRIBE_RULE(<entity>) + "—suggest: " + SUGGEST_ALTERNATIVE(<entity>)
        ELSE RETURN "Fits—proceeding."
    ) WITH PARAMETERS ("type", "entity", "change"),
    DEFINE FUNCTION PROPOSE_RESOLUTION AS (
      SELECT "fix for <issue> in <entity>—e.g., tweak profile, adjust rule, shift arc"
      FROM [context: story_world]
      WHERE entity = <entity>
      WITH WHATIF "<entity> adapts to <issue>"
    ) WITH PARAMETERS ("type", "entity", "issue")
  )
  OUTPUT (
    "coherence_status": "pushback or confirmation",
    "evolution_updates": "system tweaks and log"
  )
)
-- Docs: Ties DSLs together—evolves Mae’s profile if she acts off, enforces store rules.

-- Usage Notes
-- Start: CALL story_forge("<seed_input>") AS interactive
-- Examples:
-- "CALL story_forge('space colony—dome cities, oxygen rationed')"
-- "DEFINE_CHARACTER('Sam', 'curious', 'digs')"
-- "CHAT('Sam', 'general')"
-- "WHATIF('Sam finds evidence')"
-- "EXPORT('synopsis')"
-- "LIST('characters')"
-- Last Executed: Serialized on 2025-02-28; layered DSLs tested with user feedback.
-- Feedback Applied: Modularized into DSLs per user request for "very cool" clarity.
